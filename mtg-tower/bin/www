#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mtg-tower:server');
var http = require('http');
var socketio = require('socket.io');
var $ = require('jquery');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Attach socket to server.
 */

var io = socketio.listen(server);
 
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for WebSocket.
 */
io.sockets.on('connection', function (socket) {
    /*
    io.sockets.emit("info", "全員に送信")　//送信元含む全員に送信
    io.emit("info", "省略可")　//上と同じ
    socket.broadcast.emit("info", "送信元以外に送信")　//送信元以外の全員に送信
    io.to(socket.id).emit('info', '送信元のあなただけ')　//特定のユーザーのみ（socket.idで送信元のみに送信）
    //とあるユーザーから「hogehoge」メッセージを受け取ったらpiyopiyoで送信
    socket.on("hogehoge", function (message) {
        io.emit("piyopiyo", message)　//送信元含む全員に送信
        socket.broadcast.emit("piyopiyo", message)　//送信元以外の全員に送信
        io.to(socket.id).emit('info', '送信元のあなただけ')　//特定のユーザーのみ（socket.idで送信元のみに送信）
    })
    */
    socket.on('login', function (message) {
        player = app.player[message.id]
        if(player.loggedIn){
          io.to(socket.id).emit('login', false)　//特定のユーザーのみ（socket.idで送信元のみに送信）
	}
        player.loggedIn = true;
        player.dysplayName = message.dysplayName;
        io.to(socket.id).emit('login', player)　//特定のユーザーのみ（socket.idで送信元のみに送信）
        socket.broadcast.emit('updateLoginStatus', app.player)　//送信元以外の全員に送信
    })
    socket.on('logout', function (message) {
        player = app.player[message.id]
        player.loggedIn = false;
        player.dysplayName = '';
        io.to(socket.id).emit('logout', true)　//特定のユーザーのみ（socket.idで送信元のみに送信）
        socket.broadcast.emit('updateLoginStatus', app.player)　//送信元以外の全員に送信
    })
    socket.on('requestLoginStatus', function (message) {
        io.to(socket.id).emit('updateLoginStatus', app.player)　//送信元以外の全員に送信
    })
})
